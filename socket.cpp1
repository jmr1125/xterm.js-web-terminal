#include "socket.h"
#include <atomic>
#include <mutex>
#include <stdexcept>
#include <uv.h>
using std::atomic;
using std::runtime_error;
namespace Socket_READ {
std::mutex use_var;
string s;
void read(uv_stream_t *client, ssize_t nread, const uv_buf_t *buf) {
  printf("read: nread: %zd", nread);
  if (nread > 0) {
    s = buf->base;
    printf("read: (%s)", buf->base);
    return;
  }
  if (nread < 0) {
    if (nread != UV_EOF)
      throw runtime_error(
          ((string) "Read error %s\n" + uv_err_name(nread)).c_str());
  }

  free(buf->base);
}
}; // namespace Socket_READ
namespace Socket_MAIN_LOOP {
enum SIGN {
  NOOP = 0x1,
  WRITE = 0x2,
  READ = 0x4,
  QUIT = 0x8 // for main loop in on_new_connection
};
mutex use_var;
atomic<SIGN> status;
Socket *SOCK;
void main_read(uv_stream_t *, Socket *);
void main_write(uv_stream_t *, Socket *);
void mainloop(uv_stream_t *client) {
  printf("mainloop\n");
  status = NOOP;
  Socket *sock = SOCK;
  use_var.unlock();
  while (status != QUIT) {
    switch (status) {
    case NOOP:
      continue;
    case QUIT:
      break;
    case READ:
      // printf("mainloop: read\n");
      main_read(client, sock);
      break;
    case WRITE:
      // printf("mainloop: write\n");
      main_write(client, sock);
      break;
    }
    status.store((SIGN)(status & QUIT));
  }
};
void main_read(uv_stream_t *client, Socket *sock) {
  Socket_READ::use_var.lock();
  sock->m_read.lock();
  // printf("main_read : (%s)\n", Socket_READ::s.c_str());
  if (Socket_READ::s.size()) {
    sock->q_read.push(Socket_READ::s);
  }
  sock->m_read.unlock();
  Socket_READ::use_var.unlock();
}
void main_write(uv_stream_t *client, Socket *sock) {
  write_req_t *req = (write_req_t *)malloc(sizeof(write_req_t));
  string s;
  sock->m_write.lock();
  s = sock->q_write.front();
  sock->q_write.pop();
  sock->m_write.unlock();
  char *STR = (char *)malloc(sizeof(char) * s.size());
  for (int i = 0; i < s.size(); ++i) {
    STR[i] = s[i];
  }
  req->buf = uv_buf_init(STR, s.size());
  uv_write((uv_write_t *)req, (uv_stream_t *)client, &req->buf, 1,
           [](uv_write_t *req, int status) {
             if (status) {
               throw std::runtime_error((string) "Write error: " +
                                        uv_strerror(status));
             }
             free_write_req(req);
           });
}
} // namespace Socket_MAIN_LOOP
namespace Socket_CONNECT {
uv_loop_t *LOOP;
Socket *SOCK;
mutex use_var;
void on_new_connection(uv_stream_t *server, int status) {
  if (status < 0) {
    fprintf(stderr, "New connection error %s\n", uv_strerror(status));
    // error!
    return;
  }
  uv_tcp_t *client = (uv_tcp_t *)malloc(sizeof(uv_tcp_t));
  uv_tcp_init(LOOP, client);
  Socket *sock = SOCK;
  use_var.unlock();
  printf("connected\n");
  if (uv_accept(server, (uv_stream_t *)client) == 0) {
    printf("accepted\n");
    Socket_MAIN_LOOP::use_var.lock();
    Socket_MAIN_LOOP::SOCK = sock;
    uv_read_start((uv_stream_t *)client, alloc_buffer,
                  [](uv_stream_t *client, ssize_t nread, const uv_buf_t *buf) {
                    printf("start read\n");
                    Socket_READ::use_var.lock();
                    Socket_READ::read(client, nread, buf);
                    Socket_READ::use_var.unlock();
                  });
    Socket_MAIN_LOOP::mainloop((uv_stream_t *)client);
  } else {
    uv_close((uv_handle_t *)client, NULL);
    throw std::runtime_error("error: accepting");
  };
}
}; // namespace Socket_CONNECT
Socket::Socket(string address, int port) {
  loop = uv_default_loop();
  uv_tcp_init(loop, &server);
  uv_ip4_addr(address.c_str(), port, &addr);
  uv_tcp_bind(&server, (const sockaddr *)&addr, 0);
}
Socket::~Socket() {
  uv_stop(loop);
  th->join();
  delete th;
}
void Socket::listen_accept() {
  Socket_CONNECT::use_var.lock();
  Socket_CONNECT::LOOP = loop;
  Socket_CONNECT::SOCK = this;
  try {
    int ret = uv_listen((uv_stream_t *)&server, 16,
                        Socket_CONNECT::on_new_connection);
  } catch (const std::runtime_error &e) {
    printf("run time error \n");
  }
  //th = new thread{uv_run, loop, UV_RUN_DEFAULT};
  uv_run(loop,UV_RUN_DEFAULT);
}

int Socket::write(const string &str) {
  Socket_MAIN_LOOP::status.store(Socket_MAIN_LOOP::WRITE);
  m_write.lock();
  q_write.push(str);
  m_write.unlock();
  return 0;
}
int Socket::read(string &s) {
  Socket_MAIN_LOOP::status.store(Socket_MAIN_LOOP::READ);
  int ret = 0;
  m_read.lock();
  if (q_read.size() == 0) {
    ret = 1;
  } else {
    s = q_read.front();
  }
  m_read.unlock();
  return ret;
}

void free_write_req(uv_write_t *req) {
  write_req_t *wr = (write_req_t *)req;
  free(wr->buf.base);
  free(wr);
}

void alloc_buffer(uv_handle_t *handle, size_t suggested_size, uv_buf_t *buf) {
  buf->base = (char *)malloc(suggested_size);
  buf->len = suggested_size;
}
