"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Throughput = exports.Runtime = void 0;
const helper_1 = require("./helper");
/**
 * Runtime mixin for PerfCase.
 * Appends `averageRuntime` to summary.
 */
function Runtime(Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            this.postAll((results) => {
                try {
                    this.summary['averageRuntime'] = helper_1.reshapeFn([
                        ':zip', 'runtime',
                        (el, fn) => {
                            if (el instanceof Array) {
                                const msecs = el.map(item => item[1] / 1000000 + item[0] * 1000);
                                return fn(Object.assign({ values: el, valuesMs: msecs }, helper_1.descriptiveStats(msecs)));
                            }
                            return el;
                        }
                    ])(results);
                }
                catch (e) {
                    console.error(e);
                    console.error(`reshaped data was:\n${helper_1.reshapeFn([':zip', 'runtime'])(results)}`);
                    throw e;
                }
            });
        }
        showRuntime() {
            this.postEach((result) => {
                const msg = `${this.getIndent()}Case "${this.name}" : ${result.run} - runtime: `
                    + `${Number(result.runtime[1] / 1000000 + result.runtime[0] * 1000).toFixed(2)} ms`;
                console.log(msg);
                return result;
            });
            return this;
        }
        showAverageRuntime() {
            this.postAll((results) => {
                const msg = `${this.getIndent()}Case "${this.name}" : ${results.length} runs - average runtime: `
                    + `${Number(this.summary['averageRuntime'].mean).toFixed(2)} ms`;
                console.log(msg);
            });
            return this;
        }
    };
}
exports.Runtime = Runtime;
/**
 * Throughput mixin for PerfCase.
 * Appends `throughput` to each ICaseResult and `averageThroughput` to summary in MB/s.
 * Expects the payload as {payloadSize: some_value} in the result.returnValue.
 */
function Throughput(Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            this.postEach((result) => {
                const msec = result.runtime[1] / 1000000 + result.runtime[0] * 1000;
                result.throughput = (result.returnValue && result.returnValue.payloadSize)
                    ? 1000 / msec * result.returnValue.payloadSize / 1024 / 1024 : 0;
            });
            this.postAll((results) => {
                try {
                    this.summary['averageThroughput'] = helper_1.reshapeFn([
                        ':zip', 'throughput',
                        (el, fn) => (el instanceof Array) ? fn(Object.assign({ values: el }, helper_1.descriptiveStats(el))) : el
                    ])(results);
                }
                catch (e) {
                    console.error(e);
                    console.error(`reshaped data was:\n${helper_1.reshapeFn([':zip', 'throughput'])(results)}`);
                    throw e;
                }
            });
        }
        showThroughput() {
            this.postEach((result) => {
                const msg = `${this.getIndent()}Case "${this.name}" : ${result.run} - `
                    + `throughput: ${Number(result.throughput).toFixed(2)} MB/s`;
                console.log(msg);
            });
            return this;
        }
        showAverageThroughput() {
            this.postAll((results) => {
                const msg = `${this.getIndent()}Case "${this.name}" : ${results.length} runs - average throughput: `
                    + `${Number(this.summary['averageThroughput'].mean).toFixed(2)} MB/s`;
                console.log(msg);
            });
            return this;
        }
    };
}
exports.Throughput = Throughput;
//# sourceMappingURL=mixins.js.map