"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
function GreeterMixin(Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            // place necessary processing in ctor
            // here: mutate ICaseResults to contain greet depending on returnValue
            this.postEach((result) => {
                result.greet = (result.returnValue === 'grumpy') ? false : true;
            });
        }
        // optional processing for every single result
        // that can be called later on the perf case
        greet() {
            return this.postEach((result) => {
                if (result.greet) {
                    console.log(`${this.getIndent()}Hi there from "${this.name}"!`);
                    return;
                }
                // do something with the grumpy result
                // explicit returning null will remove the record
                return null;
            });
        }
        // optional processing for all results
        // here: print some log and collect data in summary
        greetingSummary() {
            return this.postAll((results) => {
                if (!this.options || !this.options.repeat) {
                    return;
                }
                const grumpyRuns = this.options.repeat - results.length;
                console.log(`${this.getIndent()}${results.length} greetings received. (${grumpyRuns} being grumpy)`);
                this.summary['greetingsRatio'] = results.length / this.options.repeat;
            });
        }
    };
}
// construct the perfcase ctor and type
const GreeterPerfCase = GreeterMixin(__1.PerfCase);
// use it
__1.perfContext('ctx', () => {
    new GreeterPerfCase('custom', () => {
        const moods = ['grumpy', 'cheerful', 'hungry', 'excited'];
        return moods[Math.floor(Math.random() * 4)];
    }, { fork: false, repeat: 5 })
        .greet()
        .greetingSummary();
});
//# sourceMappingURL=custom_mixin.js.map