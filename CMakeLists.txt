cmake_minimum_required(VERSION 3.0)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
project (webterm)

message(CHECK_START "Finding libuv")
find_path(LIBUV_INCLUDE_DIR uv.h)
find_library(LIBUV_LIBRARY NAMES uv_a uv)

message(STATUS "INCLUDE DIR:${LIBUV_INCLUDE_DIR}")
message(STATUS "LIBRARY DIR:${LIBUV_LIBRARY}")

if(NOT(("${LIBUV_INCLUDE_DIR}" EQUAL "") OR ("${LIBUV_LIBRARY}" EQUAL "")))
	message(CHECK_PASS "found")
else()
	message(CHECK_FAIL "not found")
	message(FATAL_ERROR "Find NO libuv")
endif()

include_directories(${LIBUV_INCLUDE_DIR})
#add_executable(test1 test.cpp)
#add_executable(test2 test1.cpp)
#target_link_libraries(test1 ${LIBUV_LIBRARY})
#target_link_libraries(test2 ${LIBUV_LIBRARY})
add_executable(test1 test1.cpp)
#add_executable(test2 test2.cpp ws.cpp sha1.cpp base64.cpp)
add_executable(test3 test3.cpp sha1.cpp base64.cpp)
add_executable(test4 test4.cpp)
add_executable(test5 test5.cpp sha1.cpp base64.cpp)
add_executable(test6 test6.cpp sha1.cpp base64.cpp ws.cpp)
add_executable(test7 test7.cpp sha1.cpp base64.cpp ws.cpp socket.cpp)
add_executable(main main.cpp ws.cpp sha1.cpp base64.cpp)
target_link_libraries(test1 ${LIBUV_LIBRARY})
target_link_libraries(main ${LIBUV_LIBRARY})
target_link_libraries(test7 ${LIBUV_LIBRARY})
#target_link_libraries(test2 ${LIBUV_LIBRARY})
